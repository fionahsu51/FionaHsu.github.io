{
  "version": 3,
  "sources": ["../../preact/src/constants.js", "../../preact/src/util.js", "../../preact/src/options.js", "../../preact/src/create-element.js", "../../preact/src/component.js", "../../preact/src/create-context.js", "../../preact/src/diff/children.js", "../../preact/src/diff/props.js", "../../preact/src/diff/index.js", "../../preact/src/render.js", "../../preact/src/clone-element.js", "../../preact/src/diff/catch-error.js"],
  "sourcesContent": ["/** Normal hydration that attaches to a DOM tree but does not diff it. */\nexport const MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nexport const MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nexport const INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nexport const MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nexport const RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\n\nexport const EMPTY_OBJ = /** @type {any} */ ({});\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-expect-error We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {preact.ContainerNode} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\t/** @type {VNode} */\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original,\n\t\t_index: -1,\n\t\t_flags: 0\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor == undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\nimport { MODE_HYDRATE } from './constants';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function BaseComponent(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nBaseComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nBaseComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {ComponentChildren | void}\n */\nBaseComponent.prototype.render = Fragment;\n\n/**\n * @param {VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._index + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet oldVNode = component._vnode,\n\t\toldDom = oldVNode._dom,\n\t\tparentDom = component._parentDom,\n\t\tcommitQueue = [],\n\t\trefQueue = [];\n\n\tif (parentDom) {\n\t\tconst newVNode = assign({}, oldVNode);\n\t\tnewVNode._original = oldVNode._original + 1;\n\t\tif (options.vnode) options.vnode(newVNode);\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\toldVNode._flags & MODE_HYDRATE ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(oldVNode) : oldDom,\n\t\t\t!!(oldVNode._flags & MODE_HYDRATE),\n\t\t\trefQueue\n\t\t);\n\n\t\tnewVNode._original = oldVNode._original;\n\t\tnewVNode._parent._children[newVNode._index] = newVNode;\n\t\tcommitRoot(commitQueue, newVNode, refQueue);\n\n\t\tif (newVNode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(newVNode);\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {Component} a\n * @param {Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR, INSERT_VNODE, MATCHED } from '../constants';\nimport { isArray } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {PreactElement} parentDom The DOM element whose children are being\n * diffed\n * @param {ComponentChildren[]} renderResult\n * @param {VNode} newParentVNode The new virtual node whose children should be\n * diff'ed against oldParentVNode\n * @param {VNode} oldParentVNode The old virtual node whose children should be\n * diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by\n * getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet i,\n\t\t/** @type {VNode} */\n\t\toldVNode,\n\t\t/** @type {VNode} */\n\t\tchildVNode,\n\t\t/** @type {PreactElement} */\n\t\tnewDom,\n\t\t/** @type {PreactElement} */\n\t\tfirstChildDom;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\t/** @type {VNode[]} */\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet newChildrenLength = renderResult.length;\n\n\tnewParentVNode._nextDom = oldDom;\n\tconstructNewChildrenArray(newParentVNode, renderResult, oldChildren);\n\toldDom = newParentVNode._nextDom;\n\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\tchildVNode = newParentVNode._children[i];\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At this point, constructNewChildrenArray has assigned _index to be the\n\t\t// matchingIndex for this VNode's oldVNode (or -1 if there is no oldVNode).\n\t\tif (childVNode._index === -1) {\n\t\t\toldVNode = EMPTY_OBJ;\n\t\t} else {\n\t\t\toldVNode = oldChildren[childVNode._index] || EMPTY_OBJ;\n\t\t}\n\n\t\t// Update childVNode._index to its final index\n\t\tchildVNode._index = i;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\t// Adjust DOM nodes\n\t\tnewDom = childVNode._dom;\n\t\tif (childVNode.ref && oldVNode.ref != childVNode.ref) {\n\t\t\tif (oldVNode.ref) {\n\t\t\t\tapplyRef(oldVNode.ref, null, childVNode);\n\t\t\t}\n\t\t\trefQueue.push(\n\t\t\t\tchildVNode.ref,\n\t\t\t\tchildVNode._component || newDom,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t}\n\n\t\tif (firstChildDom == null && newDom != null) {\n\t\t\tfirstChildDom = newDom;\n\t\t}\n\n\t\tif (\n\t\t\tchildVNode._flags & INSERT_VNODE ||\n\t\t\toldVNode._children === childVNode._children\n\t\t) {\n\t\t\toldDom = insert(childVNode, oldDom, parentDom);\n\t\t} else if (\n\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\tchildVNode._nextDom !== undefined\n\t\t) {\n\t\t\t// Since Fragments or components that return Fragment like VNodes can\n\t\t\t// contain multiple DOM nodes as the same level, continue the diff from\n\t\t\t// the sibling of last DOM child of this child VNode\n\t\t\toldDom = childVNode._nextDom;\n\t\t} else if (newDom) {\n\t\t\toldDom = newDom.nextSibling;\n\t\t}\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because it\n\t\t// is only used by `diffChildren` to determine where to resume the diff\n\t\t// after diffing Components and Fragments. Once we store it the nextDOM\n\t\t// local var, we can clean up the property. Also prevents us hanging on to\n\t\t// DOM nodes that may have been unmounted.\n\t\tchildVNode._nextDom = undefined;\n\n\t\t// Unset diffing flags\n\t\tchildVNode._flags &= ~(INSERT_VNODE | MATCHED);\n\t}\n\n\t// TODO: With new child diffing algo, consider alt ways to diff Fragments.\n\t// Such as dropping oldDom and moving fragments in place\n\t//\n\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t// _nextDom property to the nextSibling of its last child DOM node.\n\t//\n\t// `oldDom` contains the correct value here because if the last child\n\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t// node's nextSibling.\n\tnewParentVNode._nextDom = oldDom;\n\tnewParentVNode._dom = firstChildDom;\n}\n\n/**\n * @param {VNode} newParentVNode\n * @param {ComponentChildren[]} renderResult\n * @param {VNode[]} oldChildren\n */\nfunction constructNewChildrenArray(newParentVNode, renderResult, oldChildren) {\n\t/** @type {number} */\n\tlet i;\n\t/** @type {VNode} */\n\tlet childVNode;\n\t/** @type {VNode} */\n\tlet oldVNode;\n\n\tconst newChildrenLength = renderResult.length;\n\tlet oldChildrenLength = oldChildren.length,\n\t\tremainingOldChildren = oldChildrenLength;\n\n\tlet skew = 0;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\t// @ts-expect-error We are reusing the childVNode variable to hold both the\n\t\t// pre and post normalized childVNode\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint' ||\n\t\t\tchildVNode.constructor == String\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode.constructor === undefined && childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\tconst skewedIndex = i + skew;\n\n\t\t// Handle unmounting null placeholders, i.e. VNode => null in unkeyed children\n\t\tif (childVNode == null) {\n\t\t\toldVNode = oldChildren[skewedIndex];\n\t\t\tif (\n\t\t\t\toldVNode &&\n\t\t\t\toldVNode.key == null &&\n\t\t\t\toldVNode._dom &&\n\t\t\t\t(oldVNode._flags & MATCHED) === 0\n\t\t\t) {\n\t\t\t\tif (oldVNode._dom == newParentVNode._nextDom) {\n\t\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\t\t\t\tunmount(oldVNode, oldVNode, false);\n\n\t\t\t\t// Explicitly nullify this position in oldChildren instead of just\n\t\t\t\t// setting `_match=true` to prevent other routines (e.g.\n\t\t\t\t// `findMatchingIndex` or `getDomSibling`) from thinking VNodes or DOM\n\t\t\t\t// nodes in this position are still available to be used in diffing when\n\t\t\t\t// they have actually already been unmounted. For example, by only\n\t\t\t\t// setting `_match=true` here, the unmounting loop later would attempt\n\t\t\t\t// to unmount this VNode again seeing `_match==true`.  Further,\n\t\t\t\t// getDomSibling doesn't know about _match and so would incorrectly\n\t\t\t\t// assume DOM nodes in this subtree are mounted and usable.\n\t\t\t\toldChildren[skewedIndex] = null;\n\t\t\t\tremainingOldChildren--;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\tconst matchingIndex = findMatchingIndex(\n\t\t\tchildVNode,\n\t\t\toldChildren,\n\t\t\tskewedIndex,\n\t\t\tremainingOldChildren\n\t\t);\n\n\t\t// Temporarily store the matchingIndex on the _index property so we can pull\n\t\t// out the oldVNode in diffChildren. We'll override this to the VNode's\n\t\t// final index after using this property to get the oldVNode\n\t\tchildVNode._index = matchingIndex;\n\n\t\toldVNode = null;\n\t\tif (matchingIndex !== -1) {\n\t\t\toldVNode = oldChildren[matchingIndex];\n\t\t\tremainingOldChildren--;\n\t\t\tif (oldVNode) {\n\t\t\t\toldVNode._flags |= MATCHED;\n\t\t\t}\n\t\t}\n\n\t\t// Here, we define isMounting for the purposes of the skew diffing\n\t\t// algorithm. Nodes that are unsuspending are considered mounting and we detect\n\t\t// this by checking if oldVNode._original === null\n\t\tconst isMounting = oldVNode == null || oldVNode._original === null;\n\n\t\tif (isMounting) {\n\t\t\tif (matchingIndex == -1) {\n\t\t\t\tskew--;\n\t\t\t}\n\n\t\t\t// If we are mounting a DOM VNode, mark it for insertion\n\t\t\tif (typeof childVNode.type != 'function') {\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t} else if (matchingIndex !== skewedIndex) {\n\t\t\tif (matchingIndex === skewedIndex + 1) {\n\t\t\t\tskew++;\n\t\t\t} else if (matchingIndex > skewedIndex) {\n\t\t\t\tif (remainingOldChildren > newChildrenLength - skewedIndex) {\n\t\t\t\t\tskew += matchingIndex - skewedIndex;\n\t\t\t\t} else {\n\t\t\t\t\tskew--;\n\t\t\t\t}\n\t\t\t} else if (matchingIndex < skewedIndex) {\n\t\t\t\tif (matchingIndex == skewedIndex - 1) {\n\t\t\t\t\tskew = matchingIndex - skewedIndex;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tskew = 0;\n\t\t\t}\n\n\t\t\t// Move this VNode's DOM if the original index (matchingIndex) doesn't\n\t\t\t// match the new skew index (i + new skew)\n\t\t\tif (matchingIndex !== i + skew) {\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove remaining oldChildren if there are any. Loop forwards so that as we\n\t// unmount DOM from the beginning of the oldChildren, we can adjust oldDom to\n\t// point to the next child, which needs to be the first DOM node that won't be\n\t// unmounted.\n\tif (remainingOldChildren) {\n\t\tfor (i = 0; i < oldChildrenLength; i++) {\n\t\t\toldVNode = oldChildren[i];\n\t\t\tif (oldVNode != null && (oldVNode._flags & MATCHED) === 0) {\n\t\t\t\tif (oldVNode._dom == newParentVNode._nextDom) {\n\t\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} parentVNode\n * @param {PreactElement} oldDom\n * @param {PreactElement} parentDom\n * @returns {PreactElement}\n */\nfunction insert(parentVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\n\tif (typeof parentVNode.type == 'function') {\n\t\tlet children = parentVNode._children;\n\t\tfor (let i = 0; children && i < children.length; i++) {\n\t\t\tif (children[i]) {\n\t\t\t\t// If we enter this code path on sCU bailout, where we copy\n\t\t\t\t// oldVNode._children to newVNode._children, we need to update the old\n\t\t\t\t// children's _parent pointer to point to the newVNode (parentVNode\n\t\t\t\t// here).\n\t\t\t\tchildren[i]._parent = parentVNode;\n\t\t\t\toldDom = insert(children[i], oldDom, parentDom);\n\t\t\t}\n\t\t}\n\n\t\treturn oldDom;\n\t} else if (parentVNode._dom != oldDom) {\n\t\tparentDom.insertBefore(parentVNode._dom, oldDom || null);\n\t\toldDom = parentVNode._dom;\n\t}\n\n\tdo {\n\t\toldDom = oldDom && oldDom.nextSibling;\n\t} while (oldDom != null && oldDom.nodeType === 8);\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {ComponentChildren} children The unflattened children of a virtual\n * node\n * @returns {VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\n/**\n * @param {VNode} childVNode\n * @param {VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(\n\tchildVNode,\n\toldChildren,\n\tskewedIndex,\n\tremainingOldChildren\n) {\n\tconst key = childVNode.key;\n\tconst type = childVNode.type;\n\tlet x = skewedIndex - 1;\n\tlet y = skewedIndex + 1;\n\tlet oldVNode = oldChildren[skewedIndex];\n\n\t// We only need to perform a search if there are more children\n\t// (remainingOldChildren) to search. However, if the oldVNode we just looked\n\t// at skewedIndex was not already used in this diff, then there must be at\n\t// least 1 other (so greater than 1) remainingOldChildren to attempt to match\n\t// against. So the following condition checks that ensuring\n\t// remainingOldChildren > 1 if the oldVNode is not already used/matched. Else\n\t// if the oldVNode was null or matched, then there could needs to be at least\n\t// 1 (aka `remainingOldChildren > 0`) children to find and compare against.\n\tlet shouldSearch =\n\t\tremainingOldChildren >\n\t\t(oldVNode != null && (oldVNode._flags & MATCHED) === 0 ? 1 : 0);\n\n\tif (\n\t\toldVNode === null ||\n\t\t(oldVNode &&\n\t\t\tkey == oldVNode.key &&\n\t\t\ttype === oldVNode.type &&\n\t\t\t(oldVNode._flags & MATCHED) === 0)\n\t) {\n\t\treturn skewedIndex;\n\t} else if (shouldSearch) {\n\t\twhile (x >= 0 || y < oldChildren.length) {\n\t\t\tif (x >= 0) {\n\t\t\t\toldVNode = oldChildren[x];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\tx--;\n\t\t\t}\n\n\t\t\tif (y < oldChildren.length) {\n\t\t\t\toldVNode = oldChildren[y];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn y;\n\t\t\t\t}\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture =\n\t\t\tname !== (name = name.replace(/(PointerCapture)$|Capture$/i, '$1'));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tvalue._attached = Date.now();\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t} else {\n\t\t\t\tvalue._attached = oldValue._attached;\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname !== 'rowSpan' &&\n\t\t\tname !== 'colSpan' &&\n\t\t\tname !== 'role' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value == 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {PreactEvent} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tif (this._listeners) {\n\t\tconst eventHandler = this._listeners[e.type + false];\n\t\t/**\n\t\t * This trick is inspired by Vue https://github.com/vuejs/core/blob/main/packages/runtime-dom/src/modules/events.ts#L90-L101\n\t\t * when the dom performs an event it leaves micro-ticks in between bubbling up which means that an event can trigger on a newly\n\t\t * created DOM-node while the event bubbles up, this can cause quirky behavior as seen in https://github.com/preactjs/preact/issues/3927\n\t\t */\n\t\tif (!e._dispatched) {\n\t\t\t// When an event has no _dispatched we know this is the first event-target in the chain\n\t\t\t// so we set the initial dispatched time.\n\t\t\te._dispatched = Date.now();\n\t\t\t// When the _dispatched is smaller than the time when the targetted event handler was attached\n\t\t\t// we know we have bubbled up to an element that was added during patching the dom.\n\t\t} else if (e._dispatched <= eventHandler._attached) {\n\t\t\treturn;\n\t\t}\n\t\treturn eventHandler(options.event ? options.event(e) : e);\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {PreactEvent} e The event object from the browser\n * @private\n */\nfunction eventProxyCapture(e) {\n\tif (this._listeners) {\n\t\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n\t}\n}\n", "import {\n\tEMPTY_OBJ,\n\tMODE_HYDRATE,\n\tMODE_SUSPENDED,\n\tRESET_MODE\n} from '../constants';\nimport { BaseComponent, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {PreactElement} parentDom The parent of the DOM element\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by\n * getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\t/** @type {any} */\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._flags & MODE_SUSPENDED) {\n\t\tisHydrating = !!(oldVNode._flags & MODE_HYDRATE);\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\touter: if (typeof newType == 'function') {\n\t\ttry {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-expect-error The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-expect-error Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new BaseComponent(\n\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!c._force &&\n\t\t\t\t\t((c.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\t\tnewVNode._original === oldVNode._original)\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\t\t\tc._force = false;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._flags &= RESET_MODE;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnewVNode._original = null;\n\t\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\t\tnewVNode._dom = oldDom;\n\t\t\t\tnewVNode._flags |= isHydrating\n\t\t\t\t\t? MODE_HYDRATE | MODE_SUSPENDED\n\t\t\t\t\t: MODE_HYDRATE;\n\t\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t\t// ^ could possibly be simplified to:\n\t\t\t\t// excessDomChildren.length = 0;\n\t\t\t} else {\n\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t}\n\t\t\toptions._catchError(e, newVNode, oldVNode);\n\t\t}\n\t} else if (\n\t\texcessDomChildren == null &&\n\t\tnewVNode._original === oldVNode._original\n\t) {\n\t\tnewVNode._children = oldVNode._children;\n\t\tnewVNode._dom = oldVNode._dom;\n\t} else {\n\t\tnewVNode._dom = diffElementNodes(\n\t\t\toldVNode._dom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\t}\n\n\tif ((tmp = options.diffed)) tmp(newVNode);\n}\n\n/**\n * @param {Array<Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {VNode} root\n */\nexport function commitRoot(commitQueue, root, refQueue) {\n\troot._nextDom = undefined;\n\n\tfor (let i = 0; i < refQueue.length; i++) {\n\t\tapplyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n\t}\n\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-expect-error Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-expect-error See above comment on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {PreactElement} dom The DOM element representing the virtual nodes\n * being diffed\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n * @returns {PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating,\n\trefQueue\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = /** @type {string} */ (newVNode.type);\n\t/** @type {any} */\n\tlet i;\n\t/** @type {{ __html?: string }} */\n\tlet newHtml;\n\t/** @type {{ __html?: string }} */\n\tlet oldHtml;\n\t/** @type {ComponentChildren} */\n\tlet newChildren;\n\tlet value;\n\tlet inputValue;\n\tlet checked;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (i = 0; i < excessDomChildren.length; i++) {\n\t\t\tvalue = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tvalue &&\n\t\t\t\t'setAttribute' in value === !!nodeType &&\n\t\t\t\t(nodeType ? value.localName === nodeType : value.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = value;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS('http://www.w3.org/2000/svg', nodeType);\n\t\t} else {\n\t\t\tdom = document.createElement(nodeType, newProps.is && newProps);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in\n\t\t// case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\t// If we are in a situation where we are not hydrating but are using\n\t\t// existing DOM (e.g. replaceNode) we should read the existing DOM\n\t\t// attributes to diff them\n\t\tif (!isHydrating && excessDomChildren != null) {\n\t\t\toldProps = {};\n\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\tvalue = dom.attributes[i];\n\t\t\t\toldProps[value.name] = value.value;\n\t\t\t}\n\t\t}\n\n\t\tfor (i in oldProps) {\n\t\t\tvalue = oldProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\toldHtml = value;\n\t\t\t} else if (i !== 'key' && !(i in newProps)) {\n\t\t\t\tsetProperty(dom, i, null, value, isSvg);\n\t\t\t}\n\t\t}\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tfor (i in newProps) {\n\t\t\tvalue = newProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t\tnewChildren = value;\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\tnewHtml = value;\n\t\t\t} else if (i == 'value') {\n\t\t\t\tinputValue = value;\n\t\t\t} else if (i == 'checked') {\n\t\t\t\tchecked = value;\n\t\t\t} else if (\n\t\t\t\ti !== 'key' &&\n\t\t\t\t(!isHydrating || typeof value == 'function') &&\n\t\t\t\toldProps[i] !== value\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, value, oldProps[i], isSvg);\n\t\t\t}\n\t\t}\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\tif (\n\t\t\t\t!isHydrating &&\n\t\t\t\t(!oldHtml ||\n\t\t\t\t\t(newHtml.__html !== oldHtml.__html &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML))\n\t\t\t) {\n\t\t\t\tdom.innerHTML = newHtml.__html;\n\t\t\t}\n\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\tif (oldHtml) dom.innerHTML = '';\n\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(newChildren) ? newChildren : [newChildren],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// As above, don't diff props during hydration\n\t\tif (!isHydrating) {\n\t\t\ti = 'value';\n\t\t\tif (\n\t\t\t\tinputValue !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(inputValue !== dom[i] ||\n\t\t\t\t\t(nodeType === 'progress' && !inputValue) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && inputValue !== oldProps[i]))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, inputValue, oldProps[i], false);\n\t\t\t}\n\n\t\t\ti = 'checked';\n\t\t\tif (checked !== undefined && checked !== dom[i]) {\n\t\t\t\tsetProperty(dom, i, checked, oldProps[i], false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {Ref<any>} ref\n * @param {any} value\n * @param {VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {VNode} vnode The virtual node to unmount\n * @param {VNode} parentVNode The parent of the VNode that initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to render into\n * @param {PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode == 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [],\n\t\trefQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating,\n\t\trefQueue\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {VNode} vnode The vnode that threw the error that was caught (except\n * for unmounting when this parameter is the highest parent that was being\n * unmounted)\n * @param {VNode} [oldVNode]\n * @param {ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {Component} */\n\tlet component,\n\t\t/** @type {ComponentType} */\n\t\tctor,\n\t\t/** @type {boolean} */\n\t\thandled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n"],
  "mappings": "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",
  "names": ["MODE_HYDRATE", "slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "constructor", "__v", "__i", "__u", "createRef", "current", "Fragment", "BaseComponent", "context", "this", "getDomSibling", "childIndex", "sibling", "updateParentDomPointers", "child", "base", "enqueueRender", "c", "push", "process", "debounceRendering", "renderQueueLength", "component", "newVNode", "oldVNode", "oldDom", "parentDom", "commitQueue", "refQueue", "sort", "shift", "__P", "diff", "__n", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "childVNode", "newDom", "firstChildDom", "oldChildren", "newChildrenLength", "constructNewChildrenArray", "applyRef", "insert", "nextSibling", "skewedIndex", "matchingIndex", "oldChildrenLength", "remainingOldChildren", "skew", "String", "findMatchingIndex", "unmount", "parentVNode", "insertBefore", "nodeType", "toChildArray", "out", "some", "x", "y", "setStyle", "style", "value", "setProperty", "test", "dom", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "l", "_attached", "Date", "now", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "removeAttribute", "setAttribute", "eventHandler", "_dispatched", "event", "tmp", "isNew", "oldProps", "oldState", "snapshot", "clearProcessingException", "newProps", "provider", "componentContext", "renderHook", "count", "newType", "outer", "contextType", "__E", "prototype", "render", "doRender", "sub", "state", "__h", "_sb", "__s", "getDerivedStateFromProps", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "__r", "getChildContext", "getSnapshotBeforeUpdate", "indexOf", "diffElementNodes", "diffed", "root", "cb", "newHtml", "oldHtml", "newChildren", "inputValue", "checked", "localName", "document", "createTextNode", "createElementNS", "is", "data", "childNodes", "attributes", "__html", "innerHTML", "skipRemove", "r", "componentWillUnmount", "replaceNode", "firstChild", "hydrate", "cloneElement", "createContext", "defaultValue", "contextId", "Consumer", "contextValue", "Provider", "subs", "ctx", "_props", "old", "splice", "error", "errorInfo", "ctor", "handled", "getDerivedStateFromError", "setState", "componentDidCatch", "undefined", "update", "callback", "s", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "a", "b"]
}
